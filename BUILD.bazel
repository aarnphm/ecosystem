load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier", "buildifier_test")
load("//rules/py/vendorred:pypi.bzl", "entry_point")

package(default_visibility = ["//visibility:public"])

# export default pyproject.toml config
filegroup(
    name = "pyproject",
    srcs = ["pyproject.toml"],
)

exports_files([
    "pyproject.toml",
    "README.md",
    "yarn.lock",
])

[
    alias(
        name = tool,
        actual = entry_point(tool),
    )
    for tool in [
        "black",
        "isort",
        "ruff",
    ]
]

genrule(
    name = "make-pypi-requirements",
    srcs = ["@pypi//:requirements.bzl"],
    outs = ["pypi.clean.bzl"],
    cmd = " | ".join([
        "cat $<",
        "cat >$@",
    ]),
)

write_file(
    name = "gen-pypi-starlark",
    out = "update-pypi.sh",
    content = [
        # This depends on bash, which is not going to work on Windows.
        "#!/usr/bin/env bash",
        "cd $BUILD_WORKSPACE_DIRECTORY",
        "cp -fv bazel-bin/pypi.clean.bzl rules/py/vendorred/pypi.bzl",
    ],
)

sh_binary(
    name = "vendor-pypi",
    srcs = ["update-pypi.sh"],
    data = [":make-pypi-requirements"],
)

genrule(
    name = "make-external-requirements",
    srcs = ["@external//:requirements.bzl"],
    outs = ["external.clean.bzl"],
    cmd = " | ".join([
        "cat $<",
        "cat >$@",
    ]),
)

write_file(
    name = "gen-external-starlark",
    out = "update-external.sh",
    content = [
        # This depends on bash, which is not going to work on Windows.
        "#!/usr/bin/env bash",
        "cd $BUILD_WORKSPACE_DIRECTORY",
        "cp -fv bazel-bin/external.clean.bzl rules/py/vendorred/external.bzl",
    ],
)

sh_binary(
    name = "vendor-external",
    srcs = ["update-external.sh"],
    data = [":make-external-requirements"],
)

alias(
    name = "flake8",
    actual = "//rules/py:flake8",
)

alias(
    name = "buildozer",
    actual = "@com_github_bazelbuild_buildtools//buildozer",
)

buildifier(
    name = "buildfmt",
)

buildifier_test(
    name = "buildcheck",
    srcs = glob([
        "**/*.bzl",
        "**/*.bazel",
        "monitoring/**/*/BUILD",
    ]),
)

alias(
    name = "pyright",
    actual = "@npm//:node_modules/pyright/index.js",
)
