package(default_visibility = ["//visibility:public"])

load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier", "buildifier_test")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python//python:defs.bzl", "py_library")
load("//bazel:run_shell.bzl", "run_shell")
load("//:requirements.bzl", "requirement")

# export default pyproject.toml config
filegroup(
    name = "pyproject",
    srcs = ["pyproject.toml"],
)

# This rule adds a convenient way to update the requirements.txt
# lockfile based on the requirements.in.
# Note that this rules will be used to distribute package with bazel.
compile_pip_requirements(
    name = "dev_requirements",
    extra_args = ["--allow-unsafe"],  # We need to allow unsafe to lock pip version
    requirements_in = "//requirements:dev-requirements.txt",
    requirements_txt = "//requirements:dev-requirements.lock.txt",
    visibility = ["//visibility:__pkg__"],
)

# The requirements.bzl file is generated with a reference to the interpreter for the host platform.
# In order to check in a platform-agnostic file, we have to replace that reference with the symbol
# loaded from our python toolchain.
genrule(
    name = "platform_agnostic",
    srcs = ["@ecosystem//:requirements.bzl"],
    outs = ["requirements.bzl"],
    cmd = " | ".join([
        "cat $<",
        # Insert our load statement after the existing one so we don't produce a file with buildifier warnings
        """sed -e '/^load.*/i\\'$$'\\n''load("@python310//:defs.bzl", "interpreter")'""",
        """tr "'" '"' """,
        """sed 's#"@python310_.*//:bin/python3"#interpreter#' >$@""",
    ]),
)

# Similarly ensures that the requirements.bzl file is updated based on the requirements.txt lockfile.
diff_test(
    name = "test_vendor",
    failure_message = "Please run: bazel run //:vendor_requirements",
    file1 = "//:requirements.bzl",
    file2 = ":platform_agnostic",
)

run_shell(
    name = "vendor_requirements",
    content = [
        "cp -fv bazel-bin/requirements.bzl requirements.bzl",
    ],
    data = [":platform_agnostic"],
)

run_shell(
    name = "format",
    content = [
        # Running isort and black
        "black .",
        "black --pyi typings/",
        "isort .",
        # Running nixfmt
        "command -v nix >/dev/null 2>&1 && find . -name '*.nix' -exec nixfmt {} \\; || (echo 'Nix is not installed, skipping running nixfmt...'; exit 0)",
    ],
    data = [
        requirement("black"),
        requirement("isort"),
        ":pyproject",
        "@nixfmt//:bin/nixfmt",
    ],
)

buildifier(
    name = "buildifier",
    exclude_patterns = ["./tools/gen_python_packages/**/*"],
)

run_shell(
    name = "check",
    content = [
        # Running isort and black
        "black --check --diff .",
        "isort --check --diff .",
        "flake8 .",
        "ruff .",
        # Running nixfmt
        "command -v nix >/dev/null 2>&1 && nixfmt --check **/*.nix || (echo 'Nix is not installed, skipping running nixfmt...'; exit 0)",
    ],
    data = [
        requirement("black"),
        requirement("isort"),
        requirement("flake8"),
        requirement("flake8-pyproject"),
        requirement("flake8-quotes"),
        requirement("ruff"),
        ":pyproject",
        "@nixfmt//:bin/nixfmt",
    ],
)

buildifier_test(
    name = "buildifier_test",
    srcs = glob([
        "**/*.bzl",
        "monitoring/**/*/BUILD",
    ]),
)
