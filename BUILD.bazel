package(default_visibility = ["//visibility:public"])

load("@com_github_bazelbuild_buildtools//buildifier:def.bzl", "buildifier", "buildifier_test")
load("@bazel_skylib//rules:diff_test.bzl", "diff_test")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@rules_python//python:defs.bzl", "py_library")
load("@com_github_bentoml_bentoml//rules:utils.bzl", "run_shell")
load("@pypi//:requirements.bzl", "entry_point", "requirement")

# export default pyproject.toml config
filegroup(
    name = "pyproject",
    srcs = ["pyproject.toml"],
)

# This rule adds a convenient way to update the requirements.txt
# lockfile based on the requirements.in.
# Note that this rules will be used to distribute package with bazel.
compile_pip_requirements(
    name = "dev_requirements",
    extra_args = ["--allow-unsafe"],  # We need to allow unsafe to lock pip version
    requirements_in = "//requirements:dev-requirements.txt",
    requirements_txt = "//requirements:dev-requirements.lock.txt",
    visibility = ["//visibility:__pkg__"],
)

[
    alias(
        name = tool,
        actual = entry_point(tool),
    )
    for tool in [
        "black",
        "isort",
        "ruff",
    ]
]

alias(
    name = "flake8",
    actual = "//rules/py:flake8",
)

run_shell(
    name = "nixfmt",
    content = ["find . -name '*.nix' -exec nixfmt {} \\; || (echo 'Failed to run nixfmt.'; exit 1)"],
    data = ["@nixfmt//:bin/nixfmt"],
)

buildifier(
    name = "buildfmt",
    exclude_patterns = ["./tools/gen_python_packages/**/*"],
)

buildifier_test(
    name = "buildcheck",
    srcs = glob([
        "**/*.bzl",
        "**/*.bazel",
        "monitoring/**/*/BUILD",
    ]),
)

run_shell(
    name = "nixcheck",
    content = ["nixfmt --check **/*.nix || (echo 'Failed to run nixfmt check'; exit 1)"],
    data = ["@nixfmt//:bin/nixfmt"],
)
