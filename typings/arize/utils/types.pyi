"""
This type stub file was generated by pyright.
"""

from enum import Enum
from enum import unique
from typing import Any
from typing import Dict
from typing import List
from typing import Union
from typing import Optional
from typing import NamedTuple
from dataclasses import dataclass

import pandas as pd
from numpy.typing import NDArray

@unique
class ModelTypes(Enum):
    NUMERIC = ...
    SCORE_CATEGORICAL = ...
    RANKING = ...

@unique
class Environments(Enum):
    TRAINING = ...
    VALIDATION = ...
    PRODUCTION = ...

class EmbeddingColumnNames(NamedTuple):
    vector_column_name: str
    data_column_name: Optional[str] = ...
    link_to_data_column_name: Optional[str] = ...

class Embedding(NamedTuple):
    vector: List[float]
    data: Optional[Union[str, List[str]]] = ...
    link_to_data: Optional[str] = ...

    @staticmethod
    def validate_embedding_object(
        emb_name: Union[str, int, float], embedding: Embedding
    ) -> None:
        """Validates that the embedding object passed is of the correct format. That is:
        1. Embedding vector must be present
        2. Validations must be passed for vector, data & link_to_data

        Args:
            emb_name (str, int, float): Name of the embedding feature the vector belongs to
            Embedding (Embedding): Embedding object

        Raises:
            ValueError: If the embedding vector is missing
            TypeError: If the embedding fields are of the wrong type
        """
        ...
    @staticmethod
    def is_valid_iterable(data: Union[str, List[str], NDArray[Any], pd.Series]) -> bool:
        """Validates that the input data field is of the correct iterable type. That is:
        1. List or
        2. numpy array or
        3. pandas Series

        Args:
            data: input iterable

        Returns:
            True if the data type is one of the accepted iterable types, false otherwise
        """
        ...

@dataclass(frozen=True)
class Schema:
    prediction_id_column_name: str
    feature_column_names: Optional[List[str]] = ...
    tag_column_names: Optional[List[str]] = ...
    timestamp_column_name: Optional[str] = ...
    prediction_label_column_name: Optional[str] = ...
    prediction_score_column_name: Optional[str] = ...
    actual_label_column_name: Optional[str] = ...
    actual_score_column_name: Optional[str] = ...
    shap_values_column_names: Optional[Dict[str, str]] = ...
    actual_numeric_sequence_column_name: Optional[str] = ...
    embedding_feature_column_names: Optional[List[EmbeddingColumnNames]] = ...
    prediction_group_id_column_name: Optional[str] = ...
    rank_column_name: Optional[str] = ...
